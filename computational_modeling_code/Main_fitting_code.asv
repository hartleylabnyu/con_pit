

# Computational Modeling Script Overview

## 1. **Setting up the Working Directory**
   The script starts by defining the working directory where the code and data reside. It then navigates to this directory.

## 2. **Loading Behavioral Data**
   The behavioral data from a specified directory is loaded into MATLAB and converted into a suitable data structure for further analysis.

## 3. **Model Fitting**
   Models are fit to the behavioral data. The result includes parameters, BIC values, and other metrics.

## 4. **Loading Age Data**
   Age data is loaded, and subject IDs are parsed from string values to numeric.

## 5. **BIC Analysis**
   Mean BIC values are calculated for each dataset and then plotted. The plotted BIC values can be used to compare the fit of different models.

## 6. **Model Recovery**
   The script simulates parameters for different models, aiming to check if parameters can be recovered from data that's generated using known parameters.

## 7. **Scatter Plots for Parameter Recovery**
   Scatter plots are used to visually compare generated (true) parameters with parameters estimated from the data.

## 8. **Weight (w) Analysis per Trial**
   For each subject and trial, a weight (referred to as 'w') is estimated and saved to a CSV file.

## 9. **Posterior Predictive Checks**
   The script appears to create data for posterior predictive checks. These checks can be used to validate the fit of a model by simulating new data from the model's posterior and comparing it to the observed data.

## 10. **Export Simulated Data**
   The script simulates subject-specific datasets based on the parameters estimated from the actual data. These datasets are then exported to individual CSV files.


% -------------------------
% SETUP
% -------------------------

%WD='/path/to/computational_modeling_code' %insert the correct directory
addpath(WD)

cd(WD) 

task_behav_dir='data/task_data/';
dataDirectory=[WD,'/',task_behav_dir]
%Load the behaviural data 
[data, all_data] = convertDataStruct(dataDirectory);


% -------------------------
% MODEL FITTING
% -------------------------

%%fit the models 
[results, bms_results] = fit_models(data);
age_dir='/data/age_cov_n90.csv';
ages = readtable([WD,age_dir]);
age = ages.age;
subjID_with_string= ages.subjID

% Initialize a numeric array to store the extracted numbers
subjID = zeros(length(subjID_with_string), 1);

% Loop through each element in the cell array
for i = 1:length(subjID_with_string)
    % Use regular expressions to find and extract numbers
    match = regexp(subjID_with_string{i}, '\d+', 'match');
    
    % Check if any numbers were found
    if ~isempty(match)
        % Convert the first matched number to a numeric value
        subjID(i) = str2double(match{1});
    end
end

% Display the extracted numbers

% Calculate the means of BIC for each dataset
BIC_adaptive_gng = mean(results(1).bic);
BIC_adaptive_gng_samemeanconf = mean(results(2).bic);
BIC_w2_free = mean(results(3).bic);

%save the BIC results 
T = table(subjID, results(1).bic, results(2).bic, results(3).bic, 'VariableNames', {'subjID', 'Two stimulus and action values, two learning rates', 'One stimulus and action value, one learning rate', 'One stimulus and action value, one learning rate, w'});

% Write the table to a CSV file
writetable(T,  [WD,'/computational_modeling_code/','BIC.csv']);

% Set the minimum value for the y-axis
yMin = 300;

% Plot the BIC values
figure;
bar([BIC_adaptive_gng, BIC_adaptive_gng_samemeanconf, BIC_w2_free]);
xticks(1:3);
xticklabels({'adaptive_gng', 'adaptive_gng_samemeanconf', 'w_free'});
ylabel('BIC Mean');
title('BIC Means for Different Datasets');

% Set the y-axis minimum limit
ylim([yMin max([BIC_adaptive_gng, BIC_adaptive_gng_samemeanconf, BIC_w2_free])+10]);

% Set the y-axis limits
ylim([yMin, max([BIC_adaptive_gng, BIC_adaptive_gng_samemeanconf, BIC_w2_free])]);


% -------------------------
% MODEL RECOVERY
% -------------------------

% Each model's parameters are divided into 5 bins. The number of samples drawn from each bin is proportional to the count of estimates in that bin.
% Draws are adjusted as needed to ensure their total equals `n_sims`. Each bin's values are then randomly sampled and shuffled.
% The shuffled simulated parameters, preserving the original distribution, are stored in `sim_params(m).x`. 
% The process repeats for all parameters and models.

models=[1 2 3]
n_sims=1000;
for model_num = 1:length(models)
    m = models(model_num);
    sim_param = []; % Reset sim_param to an empty array at the start of each iteration

    for n = 1:size(results(m).x,2)
        %define 5 bins
        [N,edges,bin] = histcounts(results(m).x(:,n),5);

        %number of samples from each bin
        prob = N/size(results(m).x,1);
        draws = round(prob*n_sims);
        if cumsum(draws) < 1000
            extra=randi(5);
            draws(extra)= draws(extra)+1; 
        elseif any(cumsum(draws) > 1000)
            extra=randi(5);
            draws(extra)= draws(extra)-1; 
        end
        %sample parameter estimates in that bin
        for each_bin = 1:length(draws)
            values_in_bin = results(m).x(bin==each_bin,n);
            y = datasample(values_in_bin,draws(each_bin),1); 
            sim_param = [sim_param; y];
        end

        %shuffle parameter estimates
        sim_params(m).x(:,n) = sim_param(randperm(length(sim_param)));
        sim_param = [];
    end 
end


triad_sim_data = cell(1, length(models));
triad_model_results = cell(1, length(models));

for i = 1:length(models)
    [triad_sim_data{i}, triad_model_results{i}] = run_param_recoverability_params_as_input(length(sim_params(i).x), sim_params, i);
end
%%remove empty cells
triad_model_results{1, 2}(1) = [];
triad_model_results{1, 3}(1) = [];
triad_model_results{1, 3}(1) = [];
triad_model_results{1, 2}.model(1) = [];
triad_model_results{1, 3}.model(1) = [];
triad_model_results{1, 3}.model(1) = [];

% -------------------------
% SCATTER PLOTS FOR PARAMETERS
% -------------------------


%%scatter plots 
param_names(1).model = {'inv temp', 'mq', 'pq', 'mv','pv'};
param_names(2).model = {'inv temp','m','p'};
param_names(3).model = {'inv temp','m','p','w'};

for a = 1:length(models)
    m = models(a);
    n_params = size(sim_params(m).x,2);
    figure(a)
    for n = 1:n_params
       [correlations(m).r(n),correlations(m).p(n)] = corr(triad_model_results{1,m}.model.x(:,n),sim_params(m).x(:,n));  
        if n_params > 3
            subplot(floor(n_params/2),floor(n_params/2)+mod(n_params,2),n)
        else
            subplot(1,n_params,n)
        end
                scatter(triad_model_results{1,m}.model.x(:,n),sim_params(m).x(:,n))
        R = corrcoef(triad_model_results{1,m}.model.x(:,n)),sim_params(m).x(:,n)
        axis square;
        title(['corr: ', num2str(correlations(m).r(n)), ' p =', num2str(correlations(m).p(n))])
        xlabel(['Generated: ',param_names(m).model{n}]);
        ylabel(['Recovered: ',param_names(m).model{n}]);
    end
end


% -------------------------
% W PER TRIAL
% -------------------------

cd(WD)


w_trial_by_trial = convertDataStruct_me_regression([WD,'/data/task_data/']); 
w_per_trial = [];

for sub = 1:size(results(1).latents,2)
   w_per_trial = [w_per_trial; results(1).latents(sub).w];
end 

w_trial_by_trial = [w_trial_by_trial,w_per_trial];
clear w_per_trial

writematrix(w_trial_by_trial, './data/w_trial_by_trial.csv')




% -------------------------
% POSTERIOR PREDICTIVE CHECKS
% -------------------------
%%%export sim stacrt as subject spesific csv
 
out_dir='./computational_modeling_code/pcc';
cd(out_dir);

%% simulate & fit triad of parameters from epirical data 

w2_fitted_with_subji(:,1)=subjID;
w2_fitted_with_subji(:,2)=results(3).x(:,1);
w2_fitted_with_subji(:,3)=results(3).x(:,2);
w2_fitted_with_subji(:,4)=results(3).x(:,3);
w2_fitted_with_subji(:,5)=results(3).x(:,4);


triad_sim_params(1).x = repmat(w2_fitted_with_subji, 100, 1);


% Determine the number of repetitions needed
num_repetitions = ceil(size(triad_sim_params.x, 1) / numel(w2_fitted_with_subji(:, 1)));

% Replicate the values and trim to match the desired length
replicated_values = repmat(w2_fitted_with_subji(:, 1), num_repetitions, 1);
replicated_values = replicated_values(1:size(triad_sim_params.x, 1));

sim_subji=replicated_values;
triad_sim_params.x(:,1) = []; % Remove the first column of 'x'

%%"run_param_recoverability_params_as_input"
 [triad_sim_data, triad_model_results] = pcc_run_param_recoverability_params_as_input(length(triad_sim_params(1).x),triad_sim_params,1)
save('simulation_output_n9000.mat', 'triad_sim_data', 'triad_model_results');

for i=1:length(sim_subji)
triad_sim_data.behavior(i).subji=replicated_values(i);
end
for i = 1:size(triad_sim_data.behavior,2);
    

 % Create filename
filename = ['Sim_subji_', num2str(i), '.csv'];
nro=size(triad_sim_data.behavior(i).block ,1);
subj_i = zeros(nro, 1);
subj_i(:)= triad_sim_data.behavior(i).subji;    
state = triad_sim_data.behavior(i).s';
block = triad_sim_data.behavior(i).block;
reward = triad_sim_data.behavior(i).r;
action = triad_sim_data.behavior(i).a;
w = triad_sim_data.behavior(i).w;

subj_csv = table(subj_i,state, block, reward, action, w);
 writetable(subj_csv, filename);

end



